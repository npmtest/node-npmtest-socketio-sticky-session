{"/home/travis/build/npmtest/node-npmtest-socketio-sticky-session/test.js":"/* istanbul instrument in package npmtest_socketio_sticky_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socketio-sticky-session/lib.npmtest_socketio_sticky_session.js":"/* istanbul instrument in package npmtest_socketio_sticky_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socketio_sticky_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socketio_sticky_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socketio-sticky-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socketio-sticky-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socketio_sticky_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socketio_sticky_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socketio_sticky_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_socketio_sticky_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socketio_sticky_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_socketio_sticky_session.__dirname + '/lib.npmtest_socketio_sticky_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socketio-sticky-session/node_modules/socketio-sticky-session/lib/sticky-session.js":"var net = require('net'),\n    cluster = require('cluster'),\n    crypto = require('crypto');\n\nmodule.exports = sticky;\n\nfunction hash(ip, seed) {\n  var hash = ip.reduce(function(r, num) {\n    r += parseInt(num, 10);\n    r %= 2147483648;\n    r += (r << 10);\n    r %= 2147483648;\n    r ^= r >> 6;\n    return r;\n  }, seed);\n\n  hash += hash << 3;\n  hash %= 2147483648;\n  hash ^= hash >> 11;\n  hash += hash << 15;\n  hash %= 2147483648;\n\n  return hash >>> 0;\n}\n\n/**\n  * Access 'private' object _handle of file decriptor to republish the read\n  * packet.\n  *\n  * Supports Node versions from 0.9.6 and up.\n  */\nfunction node96Republish(fd, data) {\n  fd._handle.onread(new Buffer(data), 0, data.length);\n}\n\n/**\n  * Access 'private' object _handle of file decriptor to republish the read\n  * packet.\n  *\n  * Supports Node version from 0.12 and up.\n  */\nfunction node012Republish(fd, data) {\n  fd._handle.onread(1, new Buffer(data));\n}\n\n/**\n  * Hash balanced layer 3 connection listener.\n  */\nfunction layer3HashBalancedConnectionListener(c) {\n  var self = this;\n\n  // Get int31 hash of ip\n  var worker,\n      ipHash = hash((c.remoteAddress || '').split(/\\./g), self.seed);\n\n  // Pass connection to worker\n  worker = self.workers[ipHash % self.workers.length];\n  worker.send('sticky-session:connection', c);\n}\n\n/**\n  * Hash balanced layer 4 connection listener.\n  *\n  * The node is choosed randomly initial and gets hash balanced later in\n  * patchConnection.\n  */\nfunction layer4HashBalancedConnectionListener(c) {\n  var self = this;\n\n  // Get int31 hash of ip\n  var worker,\n      random = crypto.randomBytes(4).readUInt32BE(0, true);\n\n  // Pass connection to worker\n  worker = self.workers[random % self.workers.length];\n  worker.send('sticky-session:sync', c);\n}\n\n/**\n  * Hash balance on the real ip and send data + file decriptor to final node.\n  */\nfunction patchConnection(c, fd, agent) {\n  // Get int31 hash of ip\n  var worker,\n      ipHash = hash((c.realIP || '').split(/\\./g), agent.seed);\n\n  // Pass connection to worker\n  worker = agent.workers[ipHash % agent.workers.length];\n  worker.send({ cmd: 'sticky-session:connection', data: c.data }, fd);\n}\n\nfunction sticky(options, callback) {\n  var connectionListener,\n      num = 0,\n      agent = new StickyAgent(options, callback);\n\n  if(cluster.isMaster) {\n    return agent.setupMaster();\n  } else {\n    return agent.setupSlave();\n  }\n}\n\nfunction StickyAgent(options, callback) {\n  var version = process.version.substr(1);\n  var index = version.indexOf('.');\n  this.callback = callback;\n\n  this.seed = 0;\n  this.header = 'x-forwarded-for';\n  this.ignoreMissingHeader = false;\n  this.republishPacket = node96Republish;\n  this.sync = {\n    isSynced: false,\n    event: 'sticky-sessions:syn'\n  };\n  this.serverOptions = {};\n\n  // `num` argument is optional\n  if (!callback) {\n    this.callback = options;\n    this.num = require('os').cpus().length;\n\n    this.connectionListener = layer3HashBalancedConnectionListener;\n  } else if (typeof options === 'number') {\n    this.num = options;\n    this.connectionListener = layer3HashBalancedConnectionListener;\n  } else {\n    if (typeof options.num === 'number') {\n      this.num = options.num;\n    } else {\n      this.num = require('os').cpus().length;\n    }\n\n    /**\n      * Set connectionListener to layer4HashBalancedConnectionListener\n      * if proxy is set to true.\n      */\n    if (options.proxy) {\n      this.connectionListener = layer4HashBalancedConnectionListener;\n    } else {\n      this.connectionListener = layer3HashBalancedConnectionListener;\n    }\n\n    // still proxy if the x-forwarded-for was not sent; needed for some reverse proxies\n    this.ignoreMissingHeader = !!options.ignoreMissingHeader;\n\n    /**\n      * Changing the header if user specified something else than\n      * 'x-forwarded-for'.\n      */\n    if (options.header) {\n      this.header = options.header.toString().toLowerCase();\n    }\n\n    /**\n      * Overwriting sync object to sync with users options.\n      */\n    if (options.sync) {\n      this.sync = options.sync;\n    }\n\n    if (Number(version.substr(0, index)) >= 1 ||\n        Number(version.substr(index + 1)) >= 12) {\n      this.serverOptions.pauseOnConnect = true;\n      this.republishPacket = node012Republish;\n    }\n  }\n}\n\nStickyAgent.prototype.setupMaster = function() {\n  var self = this;\n\n  // Master will spawn `num` workers\n  self.workers = [];\n  for (var i = 0; i < self.num; i++) {\n    !function spawn(i) {\n      self.workers[i] = cluster.fork();\n      // Restart worker on exit\n      self.workers[i].on('exit', function() {\n      console.error('sticky-session: worker died');\n      spawn(i);\n    });\n\n      self.workers[i].on('message', function(msg, c) {\n        if (typeof msg === 'object')\n        {\n          if (msg.cmd === 'sticky-session:ack') {\n            patchConnection(msg, c, self);\n          }\n        }\n      });\n\n    }(i);\n  }\n\n  self.seed = crypto.randomBytes(4).readUInt32BE(0, true) % 0x80000000;\n  return net.createServer(self.serverOptions, function(c) {\n    self.connectionListener(c);\n  });\n};\n\nStickyAgent.prototype.setupSlave = function() {\n  var self = this;\n\n  self.server = typeof self.callback === 'function' ? self.callback() :\n    self.callback;\n\n  process.on('message', function(msg, socket) {\n\n    if( socket ) self.listener(msg, socket);\n  });\n\n  if (!self.server) {\n    throw new Error('Worker hasn\\'t created server!');\n  }\n\n  // Monkey patch server to do not bind to port\n  var oldListen = self.server.listen;\n  self.server.listen = function listen() {\n    var lastArg = arguments[arguments.length - 1];\n\n    if (typeof lastArg === 'function') {\n      lastArg();\n    }\n\n    return oldListen.call(this, null);\n  };\n\n  return self.server;\n};\n\n/**\n  * Worker process\n  */\nStickyAgent.prototype.listener = function(msg, socket) {\n  var self = this;\n  /**\n    * Worker received sync flagged request.\n    */\n  if (msg === 'sticky-session:sync') {\n  /**\n    * Reading data once from file descriptor and extract ip from the\n    * header.\n    */\n    if (socket)\n    {\n      socket.once('data', function(data) {\n        var strData = data.toString().toLowerCase(),\n            searchPos = strData.indexOf(self.header),\n            endPos;\n\n        if( self.serverOptions.pauseOnConnect )\n          socket.pause();\n\n        /**\n          * If the header was not found return, probably unwanted behavior.\n          */\n        if (searchPos === -1) {\n          if (self.ignoreMissingHeader) {\n            process.send(\n              { cmd: 'sticky-session:ack', realIP: socket.remoteAddress, data: data },\n              socket\n            );\n            return;\n          } else {\n            socket.destroy();\n            return;\n          }\n        }\n\n        searchPos = strData.indexOf(':', searchPos) + 1;\n\n        endPos = strData.indexOf('\\n', searchPos);\n        strData = strData.substr(searchPos, endPos - searchPos - 1).trim();\n\n        //Send ackknownledge + data and real ip adress back to master\n        process.send(\n          { cmd: 'sticky-session:ack', realIP: strData, data: data },\n          socket\n        );\n\n      });\n\n      if( self.serverOptions.pauseOnConnect )\n        socket.resume();\n    }\n  }\n  /**\n    * Message was an object and has to contain a cmd variable.\n    */\n  else if (typeof msg === 'object') {\n    /**\n      * Master send us a finalized to us assigned file descriptor\n      * and the read data from the ip extraction.\n      */\n    if (msg.cmd === 'sticky-session:connection') {\n      var sync = self.sync;\n\n      /**\n        * We register the event, to synchronize the data republishing\n        * if the user wants for some reason manually call the sync.\n        */\n      if (sync.isSynced) {\n        socket.once(sync.event, function() {\n          self.republishPacket(socket, msg.data);\n        });\n      }\n\n      self.server.emit('connection', socket);\n\n      /**\n        * We're going to push the packet back to the net controller,\n        * to let this node complete the original request.\n        */\n      if (!sync.isSynced) {\n        self.republishPacket(socket, msg.data);\n      }\n    }\n  } else if (msg !== 'sticky-session:connection') {\n    return;\n  } else {\n    self.server.emit('connection', socket);\n  }\n};\n"}